# This script is an example about using an Ansible playbook for
# installing GXServer pre-requisites
# 
# Prerequisites: 
# .- There is a .ini file on the local HOST w/ SQLServer parameters.
# .- Defined environment variable named GX_PATH (poiting to GX installation)
# .- GeneXus IDE must be closed to enable the extension installation.
#
# Installs & configure:
# .- SQLServer
# .- Url-rewrite 2
# 

- hosts: all
  gather_facts: True
  vars:
  # remote: 
   sql_instance_name: sqlexpress
   sql_installer_folder: c:\sql
   sql_download_url: http://download.microsoft.com/download/E/A/E/EAE6F7FC-767A-4038-A954-49B8B05D04EB/ExpressAndTools%2064BIT/SQLEXPRWT_x64_ENU.exe
   urlrewrite_download_url: https://download.microsoft.com/download/C/9/E/C9E8180D-4E51-40A6-A9BF-776990D8BCA9/rewrite_amd64.msi
   file_urlrewrite_installer: c:\rewrite_amd64.msi
  # local:
   local_files: ../files
   ini_file_name: sql_conf.ini

  tasks:
   - debug: var=hostvars[inventory_hostname]
   - name: create a directory for SQLSERVERSQLSERVER installer download
     win_file: 
        path: "{{ sql_installer_folder }}"
        state: directory

   - name: create a directory for SQLSERVER installer extraction
     win_file: 
        path: "{{ sql_installer_folder }}/installer"
        state: directory

   - name: copy previously defined SQLSERVER conf file 
     win_template: 
       src: "{{local_files}}/{{ ini_file_name }}.j2"
       dest: "{{ sql_installer_folder }}/{{ ini_file_name }}"

   - name: check if SQLSERVER installer file already exists in ENV
     win_stat:
        path: "{{ sql_installer_folder }}/sql_installer.exe"
     register: installer_file

   - name: download SQLSERVER installer to the ENV (if not exists)
     win_get_url:
          url: '{{ sql_download_url }}' 
          dest: '{{ sql_installer_folder }}/sql_installer.exe'
     when: not installer_file.stat.exists

   - name: Extract SQLSERVER installer
     win_command: '"{{ sql_installer_folder }}/sql_installer.exe" /q /x:"{{ sql_installer_folder }}/installer"'
     args:
      chdir: "{{ sql_installer_folder }}"
      creates: "{{ sql_installer_folder }}/installer/setup.exe"

   - name: Install SQLSERVER DBMS
     win_command: '{{ sql_installer_folder }}/installer/setup.exe /configurationfile={{ sql_installer_folder }}/{{ ini_file_name }}'
     args:
      chdir: "{{ sql_installer_folder }}"

   - name: Add / Update registry for SQLSERVER TCP port
     win_regedit:
       path: 'HKLM:\Software\Microsoft\Microsoft SQL Server\MSSQL12.{{ sql_instance_name }}\MSSQLServer\SuperSocketNetLib\Tcp\IPAll'
       name: TcpPort
       data: 1433
     register: win_reg

   - name: Restart MSSSQL service
     win_service:
       name: 'MSSQL${{ sql_instance_name }}'
       force_dependent_services: yes
       state: restarted
     when: win_reg.changed

   - name: check if urlrewrite installer exists on ENV
     win_stat:
        path: "{{ file_urlrewrite_installer }}"
     register: urlrewrite_file

   - name: Download urlrewrite installer (iis10 compatible)
     win_get_url:
          url: '{{ urlrewrite_download_url }}'
          dest: "{{ file_urlrewrite_installer }}"
     when: not urlrewrite_file.stat.exists

   - name: Install urlrewrite
     win_command: msiexec.exe /i "{{ file_urlrewrite_installer }}" /qn
     args:
      chdir: c:\

